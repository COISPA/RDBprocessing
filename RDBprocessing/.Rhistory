dt3 <- suppressWarnings(dt3 %>% tidyr::separate(time, c("Year","Quarter")," - "))
dt3$MESH_SIZE_RANGE<-as.character(dt3$MESH_SIZE_RANGE)
# numbers at LC : NA-->0
dt3<- dt3 %>% dplyr::mutate_at(dplyr::vars( -(Year:stock) ),
list(~ dplyr::if_else( is.na(.), 0, .) ) )
LANDINGS <- data.frame(
ID = NA ,
COUNTRY = COUNTRY ,
YEAR = YEAR ,
QUARTER =dt3$Quarter,
VESSEL_LENGTH = dt3$VL,
GEAR = dt3$gear,
MESH_SIZE_RANGE = dt3$MESH_SIZE_RANGE,
FISHERY =  dt3$FISHERY ,
AREA = sel_spe$GSA[i],
SPECON = -1 ,
SPECIES = STK ,
LANDINGS = dt3$totalW ,
UNIT = UNIT1
)
LANDINGS<- suppressMessages(dplyr::left_join(LANDINGS,dt3[,-c(1,3,8:11)],by=c( "QUARTER"  ="Quarter" ,
"GEAR"="gear" ,  "VESSEL_LENGTH" = "VL"  ,
"MESH_SIZE_RANGE","FISHERY" ))
)
LANDINGS<-LANDINGS[,-14]
# take care of number of Length classes (max is 100 acc. to DG MARE Med&BS template)
zz<-dim(LANDINGS[-c(1:13)])[2]
names(LANDINGS)[-c(1:13)]<- paste("LENGTHCLASS",seq(0,zz-1,1),sep="")
if(zz>=100){
LANDINGS$LENGTHCLASS100_PLUS<- rowSums(LANDINGS[,!1:113])
LANDINGS<-LANDINGS %>% dplyr::select(ID:LENGTHCLASS99,LENGTHCLASS100_PLUS)
}
fishery$SDEF_codification[match(LANDINGS$FISHERY ,
RDBprocessing::fishery$DGMARE_Med_BS_codification)]
fishery$SDEF_codification
# FISHERY to DG MARE Med&BS codification
LANDINGS$FISHERY <- RDBprocessing::fishery$SDEF_codification[match(LANDINGS$FISHERY ,
RDBprocessing::fishery$DGMARE_Med_BS_codification)]
LANDINGS$SPECIES<-RDBprocessing::Annex17$Species[match(LANDINGS$SPECIES ,
RDBprocessing::Annex17$Scientific_name)]
LANDINGS$VESSEL_LENGTH<-RDBprocessing::msr$SDEF_codification_MSR[match(LANDINGS$VESSEL_LENGTH ,
RDBprocessing::msr$DGMARE_Med_BS_codification_MSR)]
# species to FAO three alpha code and set ID (COUNTRY, AREA, GEAR, VESSEL_LENGTH,
# MESH_SIZE_RANGE,QUARTER, SPECIES)
land.tab <-LANDINGS %>% dplyr::mutate(ID = paste(COUNTRY, AREA, GEAR,FISHERY, VESSEL_LENGTH,
MESH_SIZE_RANGE,YEAR, QUARTER, SPECIES, sep = "_"))
lan.temp2<-data.frame(matrix(nrow=0,ncol=length(header)))
colnames(lan.temp2)=as.vector(header)
lan.temp2<-rbind(lan.temp2,land.tab)
lan.temp2[,-c(1:13)][is.na(lan.temp2[,-c(1:13)])] <- 0
lan.temp2
RDBprocessing::msr
LANDINGS$SPECIES
LANDINGS$VESSEL_LENGTH
STK<- sel_spe$SPECIES[i]
AREA <- sel_spe$GSA[i]
fri_csc1<- COSTcore::subset(fri_csc, space==sel_spe$GSA[i],table="ca",link=T)
fri_clc1<- COSTcore::subset(fri_clc, space==sel_spe$GSA[i],table="cl")
# The first step is to create the empty object, that will be given
# the appropriate values for the descritor  fields.
lanEstim <-
dbeObject(
desc = paste(STK, AREA,"Landings", sep="_"),
species = STK,
catchCat = "LAN",
strataDesc = fri_strD1,
methodDesc = sel_spe$lanEstim_methodDesc[i]
)
# the only arguments to pass to the function are the dbe object,
# the consolidated cs and cl datasets.
if ( sel_spe$lanEstim_methodDesc[i]=="analytical"){
lanEstim <- RaiseLgth(lanEstim, fri_csc1, fri_clc1,incl.precision =F)
} else {
lanEstim <- RaiseLgthBoot(lanEstim, fri_csc1, fri_clc1,
incl.precision =F,B=15)
}
# totalW\$estim : total weight,
aa <-lanEstim@totalW$estim
aa$value<- aa$value/1000 # tons
aa<- dplyr::rename(aa, "totalW"=value)
# lenStruc\$estim : numbers-at-length estimates
bb<- lanEstim@lenStruc$estim
# define LCs and UNIT len
UNIT <- as.character( unique(fri_csc@ca$lenCode[fri_csc@ca$spp==STK]) )
if (UNIT %in% c("mm", "MM")& sel_spe$LC_RANGE[i]==10) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
if (UNIT %in% c("mm", "MM") & sel_spe$LC_RANGE[i]==1) {
bb$length<-as.numeric(bb$length)
UNIT1<- "MM"
}
if (UNIT %in% c("mm", "MM") & sel_spe$LC_RANGE[i]==5) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
if (UNIT %in% c("cm", "CM") ) {
bb$length<-as.numeric(bb$length)
UNIT1<- "CM"
}
if (UNIT %in% c("scm", "SCM") & sel_spe$LC_RANGE[i]==5) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
if (UNIT %in% c("scm", "SCM") & sel_spe$LC_RANGE[i]==10) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
bb$length<- plyr::round_any(as.numeric(bb$length),1,floor)
bb$value<- bb$value/1000 # '000 ind
bb<-aggregate(bb$value,by=list(bb$time,bb$space,bb$technical,bb$length),FUN="sum")
colnames(bb)=c("time","space","technical","length","value")
ab=  suppressMessages(dplyr::left_join(bb,aa ,by = c("time", "space", "technical")))
ab<- suppressWarnings(ab %>% tidyr::separate(technical, c("gear","FISHERY","MESH_SIZE_RANGE"),
sep = "_",remove=F))
ab<-cbind(ab[,c(1:5)],rep(NA,nrow(ab)),ab[,c(6:9)])
#, "VL"
colnames(ab)[6]="VL"
ab$length<- as.numeric(as.character(ab$length))
ab<- ab%>% dplyr::group_by(time,   space , gear  ,FISHERY, VL,MESH_SIZE_RANGE  ) %>%
dplyr::mutate(minlc=min(length,na.rm=T),maxlc=max(length,na.rm=T))
# matrix with all combinations of "time"   "space"  "gear"   "VL"
# "length" ,"MESH_SIZE_RANGE"
dt <- data.table::as.data.table(ab)
dt[,c(1:7)][is.na(dt[,c(1:7)])]<- -1
seq_l <-  seq(0, 99, by = 1) #
dt$id<- paste(dt$time,dt$space,dt$gear,dt$FISHERY,dt$VL,
dt$MESH_SIZE_RANGE,sep=":")
dt1<- dt[, list(length = seq_l), by = id]
dt1<- suppressWarnings(dt1 %>% tidyr::separate(id, c("time", "space", "gear", "FISHERY","VL",
"MESH_SIZE_RANGE"), sep = ":"))
ab[is.na(ab)]<- -1
class(dt1$VL)<-"numeric"
dt2<- suppressMessages(dplyr::left_join(dt1,ab))
dt2$stock<- STK
##
dt3 <- reshape2::dcast(dt2,as.formula(paste(paste(names(dt2)[! names(dt2) %in%
c("length","value")], collapse='+'), "length", sep="~")),
value.var = "value")
dt3=dt3[complete.cases(dt3[,c(7:9)]), ]
dt3 <- suppressWarnings(dt3 %>% tidyr::separate(time, c("Year","Quarter")," - "))
dt3$MESH_SIZE_RANGE<-as.character(dt3$MESH_SIZE_RANGE)
# numbers at LC : NA-->0
dt3<- dt3 %>% dplyr::mutate_at(dplyr::vars( -(Year:stock) ),
list(~ dplyr::if_else( is.na(.), 0, .) ) )
LANDINGS <- data.frame(
ID = NA ,
COUNTRY = COUNTRY ,
YEAR = YEAR ,
QUARTER =dt3$Quarter,
VESSEL_LENGTH = dt3$VL,
GEAR = dt3$gear,
MESH_SIZE_RANGE = dt3$MESH_SIZE_RANGE,
FISHERY =  dt3$FISHERY ,
AREA = sel_spe$GSA[i],
SPECON = -1 ,
SPECIES = STK ,
LANDINGS = dt3$totalW ,
UNIT = UNIT1
)
LANDINGS<- suppressMessages(dplyr::left_join(LANDINGS,dt3[,-c(1,3,8:11)],by=c( "QUARTER"  ="Quarter" ,
"GEAR"="gear" ,  "VESSEL_LENGTH" = "VL"  ,
"MESH_SIZE_RANGE","FISHERY" ))
)
LANDINGS<-LANDINGS[,-14]
# take care of number of Length classes (max is 100 acc. to DG MARE Med&BS template)
zz<-dim(LANDINGS[-c(1:13)])[2]
names(LANDINGS)[-c(1:13)]<- paste("LENGTHCLASS",seq(0,zz-1,1),sep="")
if(zz>=100){
LANDINGS$LENGTHCLASS100_PLUS<- rowSums(LANDINGS[,!1:113])
LANDINGS<-LANDINGS %>% dplyr::select(ID:LENGTHCLASS99,LENGTHCLASS100_PLUS)
}
# FISHERY to DG MARE Med&BS codification
LANDINGS$FISHERY <- RDBprocessing::fishery$SDEF_codification[match(LANDINGS$FISHERY ,
RDBprocessing::fishery$DGMARE_Med_BS_codification)]
LANDINGS$FISHERY
LANDINGS$SPECIES<-RDBprocessing::Annex17$Species[match(LANDINGS$SPECIES ,
RDBprocessing::Annex17$Scientific_name)]
LANDINGS$MESH_SIZE_RANGE
RDBprocessing::msr
LANDINGS$MESH_SIZE_RANGE<-RDBprocessing::msr$SDEF_codification_MSR[match(LANDINGS$MESH_SIZE_RANGE ,
RDBprocessing::msr$DGMARE_Med_BS_codification_MSR)]
LANDINGS$MESH_SIZE_RANGE
RDBprocessing::msr$SDEF_codification_MSR
match(LANDINGS$MESH_SIZE_RANGE ,
RDBprocessing::msr$DGMARE_Med_BS_codification_MSR)
RDBprocessing::msr$SDEF_codification_MSR[match(LANDINGS$MESH_SIZE_RANGE ,
RDBprocessing::msr$DGMARE_Med_BS_codification_MSR)]
LANDINGS$MESH_SIZE_RANGE
STK<- sel_spe$SPECIES[i]
AREA <- sel_spe$GSA[i]
fri_csc1<- COSTcore::subset(fri_csc, space==sel_spe$GSA[i],table="ca",link=T)
fri_clc1<- COSTcore::subset(fri_clc, space==sel_spe$GSA[i],table="cl")
# The first step is to create the empty object, that will be given
# the appropriate values for the descritor  fields.
lanEstim <-
dbeObject(
desc = paste(STK, AREA,"Landings", sep="_"),
species = STK,
catchCat = "LAN",
strataDesc = fri_strD1,
methodDesc = sel_spe$lanEstim_methodDesc[i]
)
# the only arguments to pass to the function are the dbe object,
# the consolidated cs and cl datasets.
if ( sel_spe$lanEstim_methodDesc[i]=="analytical"){
lanEstim <- RaiseLgth(lanEstim, fri_csc1, fri_clc1,incl.precision =F)
} else {
lanEstim <- RaiseLgthBoot(lanEstim, fri_csc1, fri_clc1,
incl.precision =F,B=15)
}
# totalW\$estim : total weight,
aa <-lanEstim@totalW$estim
aa$value<- aa$value/1000 # tons
aa<- dplyr::rename(aa, "totalW"=value)
# lenStruc\$estim : numbers-at-length estimates
bb<- lanEstim@lenStruc$estim
# define LCs and UNIT len
UNIT <- as.character( unique(fri_csc@ca$lenCode[fri_csc@ca$spp==STK]) )
if (UNIT %in% c("mm", "MM")& sel_spe$LC_RANGE[i]==10) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
if (UNIT %in% c("mm", "MM") & sel_spe$LC_RANGE[i]==1) {
bb$length<-as.numeric(bb$length)
UNIT1<- "MM"
}
if (UNIT %in% c("mm", "MM") & sel_spe$LC_RANGE[i]==5) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
if (UNIT %in% c("cm", "CM") ) {
bb$length<-as.numeric(bb$length)
UNIT1<- "CM"
}
if (UNIT %in% c("scm", "SCM") & sel_spe$LC_RANGE[i]==5) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
if (UNIT %in% c("scm", "SCM") & sel_spe$LC_RANGE[i]==10) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
bb$length<- plyr::round_any(as.numeric(bb$length),1,floor)
bb$value<- bb$value/1000 # '000 ind
bb<-aggregate(bb$value,by=list(bb$time,bb$space,bb$technical,bb$length),FUN="sum")
colnames(bb)=c("time","space","technical","length","value")
ab=  suppressMessages(dplyr::left_join(bb,aa ,by = c("time", "space", "technical")))
ab<- suppressWarnings(ab %>% tidyr::separate(technical, c("gear","FISHERY","MESH_SIZE_RANGE"),
sep = "_",remove=F))
ab<-cbind(ab[,c(1:5)],rep(NA,nrow(ab)),ab[,c(6:9)])
#, "VL"
colnames(ab)[6]="VL"
ab$length<- as.numeric(as.character(ab$length))
ab<- ab%>% dplyr::group_by(time,   space , gear  ,FISHERY, VL,MESH_SIZE_RANGE  ) %>%
dplyr::mutate(minlc=min(length,na.rm=T),maxlc=max(length,na.rm=T))
# matrix with all combinations of "time"   "space"  "gear"   "VL"
# "length" ,"MESH_SIZE_RANGE"
dt <- data.table::as.data.table(ab)
dt[,c(1:7)][is.na(dt[,c(1:7)])]<- -1
seq_l <-  seq(0, 99, by = 1) #
dt$id<- paste(dt$time,dt$space,dt$gear,dt$FISHERY,dt$VL,
dt$MESH_SIZE_RANGE,sep=":")
dt1<- dt[, list(length = seq_l), by = id]
dt1<- suppressWarnings(dt1 %>% tidyr::separate(id, c("time", "space", "gear", "FISHERY","VL",
"MESH_SIZE_RANGE"), sep = ":"))
ab[is.na(ab)]<- -1
class(dt1$VL)<-"numeric"
dt2<- suppressMessages(dplyr::left_join(dt1,ab))
dt2$stock<- STK
##
dt3 <- reshape2::dcast(dt2,as.formula(paste(paste(names(dt2)[! names(dt2) %in%
c("length","value")], collapse='+'), "length", sep="~")),
value.var = "value")
dt3=dt3[complete.cases(dt3[,c(7:9)]), ]
dt3 <- suppressWarnings(dt3 %>% tidyr::separate(time, c("Year","Quarter")," - "))
dt3$MESH_SIZE_RANGE<-as.character(dt3$MESH_SIZE_RANGE)
# numbers at LC : NA-->0
dt3<- dt3 %>% dplyr::mutate_at(dplyr::vars( -(Year:stock) ),
list(~ dplyr::if_else( is.na(.), 0, .) ) )
LANDINGS <- data.frame(
ID = NA ,
COUNTRY = COUNTRY ,
YEAR = YEAR ,
QUARTER =dt3$Quarter,
VESSEL_LENGTH = dt3$VL,
GEAR = dt3$gear,
MESH_SIZE_RANGE = dt3$MESH_SIZE_RANGE,
FISHERY =  dt3$FISHERY ,
AREA = sel_spe$GSA[i],
SPECON = -1 ,
SPECIES = STK ,
LANDINGS = dt3$totalW ,
UNIT = UNIT1
)
LANDINGS<- suppressMessages(dplyr::left_join(LANDINGS,dt3[,-c(1,3,8:11)],by=c( "QUARTER"  ="Quarter" ,
"GEAR"="gear" ,  "VESSEL_LENGTH" = "VL"  ,
"MESH_SIZE_RANGE","FISHERY" ))
)
LANDINGS<-LANDINGS[,-14]
# take care of number of Length classes (max is 100 acc. to DG MARE Med&BS template)
zz<-dim(LANDINGS[-c(1:13)])[2]
names(LANDINGS)[-c(1:13)]<- paste("LENGTHCLASS",seq(0,zz-1,1),sep="")
if(zz>=100){
LANDINGS$LENGTHCLASS100_PLUS<- rowSums(LANDINGS[,!1:113])
LANDINGS<-LANDINGS %>% dplyr::select(ID:LENGTHCLASS99,LENGTHCLASS100_PLUS)
}
# FISHERY to DG MARE Med&BS codification
LANDINGS$FISHERY <- RDBprocessing::fishery$SDEF_codification[match(LANDINGS$FISHERY ,
RDBprocessing::fishery$DGMARE_Med_BS_codification)]
LANDINGS$SPECIES<-RDBprocessing::Annex17$Species[match(LANDINGS$SPECIES ,
RDBprocessing::Annex17$Scientific_name)]
LANDINGS$MESH_SIZE_RANGE
RDBprocessing::msr
RDBprocessing::msr$DGMARE_Med_BS_codification_MSR[match(LANDINGS$MESH_SIZE_RANGE ,
RDBprocessing::msr$DGMARE_Med_BS_codification_MSR)]
RDBprocessing::msr$DGMARE_Med_BS_codification_MSR
LANDINGS$MESH_SIZE_RANGE
match(LANDINGS$MESH_SIZE_RANGE ,
RDBprocessing::msr$DGMARE_Med_BS_codification_MSR)
RDBprocessing::msr$DGMARE_Med_BS_codification_MSR[match(LANDINGS$MESH_SIZE_RANGE ,
RDBprocessing::msr$SDEF_codification_MSR)]
LANDINGS$MESH_SIZE_RANGE<-RDBprocessing::msr$DGMARE_Med_BS_codification_MSR[match(LANDINGS$MESH_SIZE_RANGE ,
RDBprocessing::msr$SDEF_codification_MSR)]
# species to FAO three alpha code and set ID (COUNTRY, AREA, GEAR, VESSEL_LENGTH,
# MESH_SIZE_RANGE,QUARTER, SPECIES)
land.tab <-LANDINGS %>% dplyr::mutate(ID = paste(COUNTRY, AREA, GEAR,FISHERY, VESSEL_LENGTH,
MESH_SIZE_RANGE,YEAR, QUARTER, SPECIES, sep = "_"))
lan.temp2<-data.frame(matrix(nrow=0,ncol=length(header)))
colnames(lan.temp2)=as.vector(header)
lan.temp2<-rbind(lan.temp2,land.tab)
lan.temp2[,-c(1:13)][is.na(lan.temp2[,-c(1:13)])] <- 0
for (i in 1:dim(sel_spe)[1]) {
STK<- sel_spe$SPECIES[i]
AREA <- sel_spe$GSA[i]
fri_csc1<- COSTcore::subset(fri_csc, space==sel_spe$GSA[i],table="ca",link=T)
fri_clc1<- COSTcore::subset(fri_clc, space==sel_spe$GSA[i],table="cl")
# The first step is to create the empty object, that will be given
# the appropriate values for the descritor  fields.
lanEstim <-
dbeObject(
desc = paste(STK, AREA,"Landings", sep="_"),
species = STK,
catchCat = "LAN",
strataDesc = fri_strD1,
methodDesc = sel_spe$lanEstim_methodDesc[i]
)
# the only arguments to pass to the function are the dbe object,
# the consolidated cs and cl datasets.
if ( sel_spe$lanEstim_methodDesc[i]=="analytical"){
lanEstim <- RaiseLgth(lanEstim, fri_csc1, fri_clc1,incl.precision =F)
} else {
lanEstim <- RaiseLgthBoot(lanEstim, fri_csc1, fri_clc1,
incl.precision =F,B=15)
}
# totalW\$estim : total weight,
aa <-lanEstim@totalW$estim
aa$value<- aa$value/1000 # tons
aa<- dplyr::rename(aa, "totalW"=value)
# lenStruc\$estim : numbers-at-length estimates
bb<- lanEstim@lenStruc$estim
# define LCs and UNIT len
UNIT <- as.character( unique(fri_csc@ca$lenCode[fri_csc@ca$spp==STK]) )
if (UNIT %in% c("mm", "MM")& sel_spe$LC_RANGE[i]==10) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
if (UNIT %in% c("mm", "MM") & sel_spe$LC_RANGE[i]==1) {
bb$length<-as.numeric(bb$length)
UNIT1<- "MM"
}
if (UNIT %in% c("mm", "MM") & sel_spe$LC_RANGE[i]==5) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
if (UNIT %in% c("cm", "CM") ) {
bb$length<-as.numeric(bb$length)
UNIT1<- "CM"
}
if (UNIT %in% c("scm", "SCM") & sel_spe$LC_RANGE[i]==5) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
if (UNIT %in% c("scm", "SCM") & sel_spe$LC_RANGE[i]==10) {
bb$length<-as.numeric(bb$length)/10
UNIT1<-"CM"
}
bb$length<- plyr::round_any(as.numeric(bb$length),1,floor)
bb$value<- bb$value/1000 # '000 ind
bb<-aggregate(bb$value,by=list(bb$time,bb$space,bb$technical,bb$length),FUN="sum")
colnames(bb)=c("time","space","technical","length","value")
ab=  suppressMessages(dplyr::left_join(bb,aa ,by = c("time", "space", "technical")))
ab<- suppressWarnings(ab %>% tidyr::separate(technical, c("gear","FISHERY","MESH_SIZE_RANGE"),
sep = "_",remove=F))
ab<-cbind(ab[,c(1:5)],rep(NA,nrow(ab)),ab[,c(6:9)])
#, "VL"
colnames(ab)[6]="VL"
ab$length<- as.numeric(as.character(ab$length))
ab<- ab%>% dplyr::group_by(time,   space , gear  ,FISHERY, VL,MESH_SIZE_RANGE  ) %>%
dplyr::mutate(minlc=min(length,na.rm=T),maxlc=max(length,na.rm=T))
# matrix with all combinations of "time"   "space"  "gear"   "VL"
# "length" ,"MESH_SIZE_RANGE"
dt <- data.table::as.data.table(ab)
dt[,c(1:7)][is.na(dt[,c(1:7)])]<- -1
seq_l <-  seq(0, 99, by = 1) #
dt$id<- paste(dt$time,dt$space,dt$gear,dt$FISHERY,dt$VL,
dt$MESH_SIZE_RANGE,sep=":")
dt1<- dt[, list(length = seq_l), by = id]
dt1<- suppressWarnings(dt1 %>% tidyr::separate(id, c("time", "space", "gear", "FISHERY","VL",
"MESH_SIZE_RANGE"), sep = ":"))
ab[is.na(ab)]<- -1
class(dt1$VL)<-"numeric"
dt2<- suppressMessages(dplyr::left_join(dt1,ab))
dt2$stock<- STK
##
dt3 <- reshape2::dcast(dt2,as.formula(paste(paste(names(dt2)[! names(dt2) %in%
c("length","value")], collapse='+'), "length", sep="~")),
value.var = "value")
dt3=dt3[complete.cases(dt3[,c(7:9)]), ]
dt3 <- suppressWarnings(dt3 %>% tidyr::separate(time, c("Year","Quarter")," - "))
dt3$MESH_SIZE_RANGE<-as.character(dt3$MESH_SIZE_RANGE)
# numbers at LC : NA-->0
dt3<- dt3 %>% dplyr::mutate_at(dplyr::vars( -(Year:stock) ),
list(~ dplyr::if_else( is.na(.), 0, .) ) )
LANDINGS <- data.frame(
ID = NA ,
COUNTRY = COUNTRY ,
YEAR = YEAR ,
QUARTER =dt3$Quarter,
VESSEL_LENGTH = dt3$VL,
GEAR = dt3$gear,
MESH_SIZE_RANGE = dt3$MESH_SIZE_RANGE,
FISHERY =  dt3$FISHERY ,
AREA = sel_spe$GSA[i],
SPECON = -1 ,
SPECIES = STK ,
LANDINGS = dt3$totalW ,
UNIT = UNIT1
)
LANDINGS<- suppressMessages(dplyr::left_join(LANDINGS,dt3[,-c(1,3,8:11)],by=c( "QUARTER"  ="Quarter" ,
"GEAR"="gear" ,  "VESSEL_LENGTH" = "VL"  ,
"MESH_SIZE_RANGE","FISHERY" ))
)
LANDINGS<-LANDINGS[,-14]
# take care of number of Length classes (max is 100 acc. to DG MARE Med&BS template)
zz<-dim(LANDINGS[-c(1:13)])[2]
names(LANDINGS)[-c(1:13)]<- paste("LENGTHCLASS",seq(0,zz-1,1),sep="")
if(zz>=100){
LANDINGS$LENGTHCLASS100_PLUS<- rowSums(LANDINGS[,!1:113])
LANDINGS<-LANDINGS %>% dplyr::select(ID:LENGTHCLASS99,LENGTHCLASS100_PLUS)
}
# FISHERY to DG MARE Med&BS codification
LANDINGS$FISHERY <- RDBprocessing::fishery$SDEF_codification[match(LANDINGS$FISHERY ,
RDBprocessing::fishery$DGMARE_Med_BS_codification)]
LANDINGS$SPECIES<-RDBprocessing::Annex17$Species[match(LANDINGS$SPECIES ,
RDBprocessing::Annex17$Scientific_name)]
LANDINGS$MESH_SIZE_RANGE<-RDBprocessing::msr$DGMARE_Med_BS_codification_MSR[match(LANDINGS$MESH_SIZE_RANGE ,
RDBprocessing::msr$SDEF_codification_MSR)]
# species to FAO three alpha code and set ID (COUNTRY, AREA, GEAR, VESSEL_LENGTH,
# MESH_SIZE_RANGE,QUARTER, SPECIES)
land.tab <-LANDINGS %>% dplyr::mutate(ID = paste(COUNTRY, AREA, GEAR,FISHERY, VESSEL_LENGTH,
MESH_SIZE_RANGE,YEAR, QUARTER, SPECIES, sep = "_"))
lan.temp2<-data.frame(matrix(nrow=0,ncol=length(header)))
colnames(lan.temp2)=as.vector(header)
lan.temp2<-rbind(lan.temp2,land.tab)
lan.temp2[,-c(1:13)][is.na(lan.temp2[,-c(1:13)])] <- 0
}
lan.temp2[is.na(lan.temp2$VESSEL_LENGTH),]$VESSEL_LENGTH="NA"
if(nrow(lan.temp2[is.na(lan.temp2$VESSEL_LENGTH),])>0)
lan.temp2[is.na(lan.temp2$VESSEL_LENGTH),]$VESSEL_LENGTH="NA"
lan.temp2
datacs=RDBprocessing::data_ex
datacl=RDBprocessing::data_exampleCL
library(RDBprocessing)
#datacs=check_cs_header(data)
library(COSTcore)
datacs=RDBprocessing::data_ex
datacl=RDBprocessing::data_exampleCL
Bland=LAND_MEDBS(datacs,datacl)
Cost_obs=RCGtoCOST_CS(datacs)
CA=Cost_obs@ca
TR=Cost_obs@tr
AREA=Bland$AREA[1]
species=unique(Bland$SPECIES)
B_melt <- melt(Bland, id=c( "ID" , "COUNTRY", "YEAR" , "QUARTER" ,
"VESSEL_LENGTH" ,"GEAR"  ,"MESH_SIZE_RANGE"  ,"FISHERY" ,
"AREA"  , "SPECON" , "SPECIES" , "LANDINGS" , "UNIT" ))
B_melt$variable <-   apply(B_melt, 1, function(x) substring(x[14], 12, nchar(x[14])) )
B_melt <- B_melt[B_melt$variable != "", ]
B_melt$variable[B_melt$variable == "100_PLUS"] <- 100
B_melt$variable <- as.numeric(as.character(B_melt$variable))
B_melt$value <- as.numeric(as.character(B_melt$value))
B_melt$GFCM_fleetsegment=as.character(B_melt$GEAR)
B_melt$GFCM_fleetsegment=""
for (i in 1:nrow(B_melt)){
if (nrow(CT[as.character(CT$LOA)== as.character(B_melt$VESSEL_LENGTH[i]) &
as.character(CT$GEAR_ACatch)== as.character(B_melt$GEAR[i]) &
as.character(CT$MESH_SIZE_RANGE_ACatch)== as.character(B_melt$MESH_SIZE_RANGE[i]) &
as.character(CT$FISHERY_ACatch)== as.character(B_melt$FISHERY[i]),])>0) {
B_melt$GFCM_fleetsegment[i]=
as.character(CT[as.character(CT$LOA)== as.character(B_melt$VESSEL_LENGTH[i]) &
as.character(CT$GEAR_ACatch)== as.character(B_melt$GEAR[i]) &
as.character(CT$MESH_SIZE_RANGE_ACatch)== as.character(B_melt$MESH_SIZE_RANGE[i]) &
as.character(CT$FISHERY_ACatch)== as.character(B_melt$FISHERY[i]) ,]$Fleet_segment)
} else {
B_melt$GFCM_fleetsegment[i]=""}
}
B_melt=B_melt[as.character(B_melt$GFCM_fleetsegment)!="",]
B_land1=aggregate(B_melt$value,by=list(B_melt$COUNTRY,
B_melt$YEAR,B_melt$AREA,B_melt$GFCM_fleetsegment,
B_melt$SPECIES,B_melt$UNIT,B_melt$variable),FUN="sum")
B_melt
